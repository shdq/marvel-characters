{"version":3,"sources":["components/Thumbnail.jsx","components/Image.jsx","components/Character.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["Thumbnail","_this","this","react_default","a","createElement","className","props","data","map","character","src","concat","thumbnail","path","extension","alt","name","key","id","toString","onClick","handleClick","bind","React","Component","Image","imageClass","Character","detailsUrl","urls","filter","link","type","i","href","url","rel","target","components_Image","image","desc","config","protocol","domain","port","publicKey","process","privateKey","characters","ts","Date","getTime","hash","md5","requestURL","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchData","fetch","then","response","status","Promise","reject","Error","json","catch","error","console","state","fetching","selected","description","loader","assertThisInitialized","_this2","randomCharacter","results","Math","floor","random","length","setState","_this$state","react_loaders_default","src_components_Character","src_components_Thumbnail","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a908086.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Thumbnail.css';\n\nclass Thumbnail extends React.Component {\n  render() {\n    return (\n      <div className=\"scrolling-line\">\n        {\n          this.props.data.map(character => {\n            return <img className=\"thumbnail\" src={`${character.thumbnail.path}/standard_medium.${character.thumbnail.extension}`} alt={character.name} key={character.id.toString()} onClick={this.props.handleClick.bind(this, character)} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default Thumbnail;\n\n","import React from 'react';\n\n// import './Image.css';\n\nclass Image extends React.Component {\n  render() {\n    return (\n      <img className={this.props.imageClass} src={this.props.src} alt={this.props.alt} />\n    );\n\n  }\n}\n\nexport default Image;\n\n","import React from \"react\";\n\nimport \"./Character.css\";\n\nimport Image from \"./Image\";\n\nconst Character = props => {\n  const detailsUrl = props.urls\n    .filter(link => link.type === \"detail\")\n    .map((link, i) => {\n      return (\n        <li className=\"character__urls-list-item\" key={i}>\n          <a\n            className=\"link\"\n            href={link.url}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            {props.name} on marvel.com\n          </a>\n        </li>\n      );\n    });\n  return (\n    <div className=\"character\">\n      <Image imageClass=\"character__image\" src={props.image} alt={props.name} />\n      <h2 className=\"character__name\">{props.name}</h2>\n      <p className=\"character__description\">{props.desc}</p>\n      <ul className=\"character__urls-list\">{detailsUrl}</ul>\n    </div>\n  );\n};\n\nexport default Character;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Loader from 'react-loaders'\n\nimport Thumbnail from './components/Thumbnail';\nimport Character from './components/Character';\n\nimport md5 from 'md5';\n\nconst config = {\n  protocol: 'https',\n  domain: 'gateway.marvel.com',\n  port: '443',\n  publicKey : `${process.env.REACT_APP_MARVEL_PUBLIC_API_KEY}`,\n  privateKey : `${process.env.REACT_APP_MARVEL_PRIVATE_API_KEY}`,\n  characters: 'characters'\n}\n\nlet ts = new Date().getTime().toString();\nlet hash = md5(ts + config.privateKey + config.publicKey);\n\nconst requestURL = `${config.protocol}://${config.domain}:${config.port}/v1/public/characters?limit=100&ts=${ts}&apikey=${config.publicKey}&hash=${hash}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: [],\n      fetching: true,\n      selected: {\n        id: 0,\n        name: `Character's name`,\n        description: `No character selected`,\n        path: `http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708`,\n        extension: `gif`,\n        urls: [],\n        loader: true\n      }\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  fetchData = url => {\n    return fetch(url)\n      .then(response => {\n        if(response.status !== 200 ) {\n          Promise.reject(Error(`Looks like there was a problem. Status Code: ${response.status}`));\n        }\n        return response.json()\n      })\n      .catch(error => console.error(`Fetch error: ${error}`))\n  }\n\n  componentDidMount() {\n    this.fetchData(requestURL)\n    .then(characters => {\n      characters = characters.data.results.filter(character => {\n        return (character.thumbnail.path !== `http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available` && character.thumbnail.path !== `http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708`);\n      });\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      const randomCharacter = characters[randomIndex];\n      this.setState({\n        characters: characters,\n        fetching : false,\n        selected: {\n          id: randomCharacter.id,\n          name: randomCharacter.name,\n          description: randomCharacter.description,\n          path: `${randomCharacter.thumbnail.path}/detail`,\n          extension: randomCharacter.thumbnail.extension,\n          urls: randomCharacter.urls\n        }\n      })\n    });\n  }\n\n  handleClick(character) {\n    this.setState({\n      selected: {\n        id: character.id,\n        name: character.name,\n        description: character.description,\n        path: `${character.thumbnail.path}/detail`,\n        extension: character.thumbnail.extension,\n        urls: character.urls\n      }\n    })\n  }\n\n  render() {\n    const { fetching, characters, selected } = this.state;\n\n    return (\n      <div className=\"App\">\n      <div><img className=\"logo\" src=\"assets/images/MarvelLogo.svg\" alt=\"Marvel logo\" /></div>\n      <h1 className=\"title\">Characters Library</h1>\n      { selected.loader ? ( <Loader type=\"ball-scale\" /> ) : <Character name={selected.name} image={`${selected.path}.${selected.extension}`} desc={selected.description} urls={selected.urls} /> }\n      { fetching ? ( <p>Loading...</p> ) : <Thumbnail data={characters} handleClick={this.handleClick} /> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}